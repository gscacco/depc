/*
 * Copyright Raffaele Rossi 2023 - 2024.
 *
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at https://www.boost.org/LICENSE_1_0.txt)
 */
/**
@page type_theory Type Theory Crash Course

@tableofcontents

The theory behind DepC is called Calculus of Construction.
It is part of the so-called [Lambda Cube](https://en.wikipedia.org/wiki/Lambda_cube).
This is a generalization of the so-called Simply-Typed Lambda Calculus,
in which types and terms can both depend on types and terms.

Here I will cover the very basics and very quickly.

@section simply_typed_lambda_calculus Simply-Typed Lambda Calculus

This is the starting point.
C and other "simple" languages operate pretty much in this space.
Here you start by having 2 infinite sets:

- an infinite set `V` of variable names
- an infinite set `T` of type names.

Types come in 2 forms and can be constructed recursively:

- a simple type, say `t` or `int`, whose name is taken from the set `T`;
- a function type (aka *arrow type*) of the form `<type> -> <type>`,
  for example `int -> string`.

In order to make the theory simpler to develop/expose, functions are curried.
This means that functions taking N arguments are modeled as functions
that take 1 argument and return a function taking N-1 argumets.
Therefore, the type of a function to add 2 integers is `int -> int -> int`.
However, this is only to simplify the theory.
Everything works just as fine in uncurried languages, such as DepC.
All you have to do is take care of all the details correctly.
In DepC, the type of a function to add 2 integers is `(int, int) -> int`.

Expressions come in 3 forms and can be constructed recursively:

- a variable, say `x`, whose name is taken from the set `V`;
- a function application `<expr> <expr>`, say `negate b`;
- a function abstraction `lambda x:<type> . <expr>`,
  for example `lambda a:int . lambda b:int . a + b`,
  or `lambda f:int->int . f 0`.

@subsection alpha_equivalence Alpha-Conversion and Alpha-Equivalence

Alpha-Equivalence is the concept that 2 expressions "mean" the same thing,
if they only differ in the name of function arguments.

For example, in C++ the following two expressions are alpha-equivalent,
even though they are syntatically different:

  - `[] (int x) { return x; }`
  - `[] (int y) { return y; }`.

By contrast, these two expressions are **not** alpha-equivalent:

  - `[] (int x) { return x + y; }`
  - `[] (int y) { return y + y; }`.

Neither are:

  - `[] (int x) { return x; }`
  - `[] (double x) { return x; }`.

Alpha-Conversion is instead the process of renaming an expression
into another that is alpha-equivalent to it.

@subsection substitution Substitution

Substitution (more precisely *capture-avoiding substitution*)
is written `M[a:=B]` and is the process of replacing
all occurrences of variable `a` inside expression `M` with expression `B`.

This operation is not completely trivial, because one needs to make sure that
the meaning of the resulting expression has not been changed accidentally.
In particular, it needs to avoid (accidental) captures, hence the name.
For example, let

  - `M := lambda y:int . x + y`
  - `B := y`
  - then `M[x:=y]` **is not** `lambda y:int . y + y` because
    the left-hand side operand of `+` would be accidentally captured by the argument `y`.

The correct substitution is `lambda w:int . y + w`,
or some other expression @ref alpha_equivalence "alpha-equivalent" to it.

@subsection beta_reduction Beta-Reduction and Beta-Equivalence

An application whose left component is a lambda abstraction,
can be reduced by substituting the right component
everywhere the function argument appears in the body of the abstraction.

For example, in C++ `[] (int x) { return x + x; }(2)` can be reduced
(by so-called one-step beta-reduction) to `2 + 2`.
If you continue reducing until you no longer have expressions of the form
`(lambda x:T . M)(N)`, then you have obtained a so-called normal-form.
For example, `2 + 2` can be further reduced to `4`,
by means of some primitive knowledge of the operator `+`,
which instead is known as @ref delta_reduction "Delta-Reduction".

Because expressions are recursive, it is possible to have a choice
about what sub-expression to beta-reduce first.
Whenever this is the case, a so-called *Convergence Theorem* states that,
regardless of the choices you make, you will eventually converge to
a unique beta-normal form.

Finally, if two expressions eventually reduce to the same beta-normal form,
they are defined to be beta-equivalent.

@subsection strong_normalization_theorem Strong Normalization Theorem

In Simply-Typed Lambda Calculus, beta-normalization
of any arbitrary expression will always terminate.
This fact is proved by the *Strong Normalization Theorem*.

This is not the case in other settings,
for example in Untyped Lambda Calculus,
or in the presence of so-called *Infinite Types*.

@subsection context Context and Typing Rules

A context `C` is like a function scope in a programming language.
It maps variable names to their types.

Typing rules are expressed using the syntax of inference rules from logic:
requirements (aka *premises*) are shown above a line;
the conclusion is shown below the line.
Any time the premisises are satisfied, the conclusion can be drawn.
Both premises and conclusions are expressed as so-called *judgements*,
which have the form `C |- M:t`, meaning:
context `C` entails that expression `M` has type `t`.
Note that here we use the character sequence `|-` to represent the
[turnstile symbol](https://en.wikipedia.org/wiki/Turnstile_(symbol)).

Judgements can always be written down; they can be "true" and they can be "false".
Only judgements that can be verified according to some typing rules
are important and they result in a so-called *legal term*,
i.e. a term that has been assigned a valid type in some valid context.
For example the following judgement is syntatically valid but incorrect,
i.e. not leading to a legal term a.k.a. a compile-time error, because
it states that if your function scope contains a variable `x` of type `int`,
then `x` has type `double`:

~~~plain
This judgement is invalid:
   <no premises>
   -----------------
   x:int |- x:double
~~~

Maybe in your particular language you have conversion rules that allow you to cast
an `int` into a `double` but those conversion rules are explicit, for example:

~~~plain
Hypothetical conversion rule from int to double:
   C |- x:int
   -------------
   C |- x:double
~~~

@subsection typing_rules Typing Rules

Below are the typing rules in Simply-Typed Lambda Calculus,
and this is their interpretation in plain english:

- the Var rule is the base case of the recursion:
  if a variable appears in your context,
  then it has the type specified by that context;
- the App rule says that the type of a function application
  is the return type of the function being invoked,
  as long as the argument to which it is applied has the correct type;
- the Abs rule says that, if you have a context `C`
  extended by one more declaration `x:a`,
  and it entails that some expression `M` has type `b`,
  then you can drop the `x` from your context
  and introduce a new function of type `a -> b`.

~~~plain
Var:
   x:a in C
   --------
   C |- x:a

App:
   C |- M: a->b
   C |- N:a
   ------------
   C |- M N: b

Abs:
   C, x:a |- M: b
   ----------------------------
   C |- lambda x:a . M : a -> b
~~~

@subsection type_checking Type-Assignment, Type-Checking and Term-Finding

There are 3 important questions that one can ask:

- Type-Assignment: if I have a context `C` and an expression `M`,
  what is the type of `M`? i.e. `C |- M:?`
- Type-Checking: if I have a context `C`, expression `M` and type `t`,
  is it true that `M` has type `t`? something like `C |-? M:t`
- Term-Finding (aka Proof-Search): if I have a context `C` and a type `t`,
  is there an expression of that type? i.e. `C |- ?:t`

Intuitively, one would say that Type-Checking is equivalent to performing Type-Assignment,
and then checking that the assigned type is actually `t`.
Whilst this would be correct, there are some subtleties, especially around function overloading.
If you have an overloaded function `f` for example `int f(int)` and `int f(string)` it is reasonable
to say that `f(0)` type-checks against `int` and so does `f("hello")`; but you cannot type-assign `f`.
You can perhaps return a list of candidate types that `f` can be assigned to and modern languages do this.
But to deal with this properly the Type-Checking algorithm is not simply "first assign and then check".

In any case, in Simply-Typed Lambda Calculus all 3 problems are decidable,
meaning that you can come up with an algorithm to answer these questions.
This is not always the case, at least for term-finding.

@section polymorphic_functions Polymorphic Functions

Here you find "terms depending on types".

In Simply-Typed Lambda Calculus the identity function on integers
is expressed by `lamda x:int . x`.
Similary, the identity function on doubles is `lambda x:double . x`.
You can repeat the process for any type, including function types.
The identity of functions `int -> int` is `lambda x: int -> int . x`.

With Polymorphic Functions you can define an identity function for all types.
You can, in fact, take as first argument the type of `x`,
i.e. `lambda t:* . lambda x:t . x` where `*` is "the type of all types".
In C++ this would be `[] <typename t> (t x) { return x; }`.

But what is the type of `[] <typename t> (t x) { return x; }`?
In C++ it's something made up by the Standard Committee without
any theoretical foundation, but in Type Theory this is called
a *Pi-type* and it is expressed as `Pi t:* . <type>`,
where `Pi` stands for the capital Greek letter.
So `lambda t:* . lambda x:t . x` has type `Pi t:* . t -> t`;
this is the type that the C++ expression should have (but it hasn't).

The typing rules of Simply-Typed Lambda Calculus need to be extended
to account for this possibility that you can apply an expression to a type.

~~~plain
Var:
   x:a in C
   --------
   C |- x:a

App1 (aka 1st order application):
   C |- M: a->b
   C |- N:a
   ------------
   C |- M N: b

Abs1 (aka 1st order abstraction):
   C, x:a |- M: b
   ----------------------------
   C |- lambda x:a . M : a -> b

App2 (aka 2nd order application):
   C |- M: (Pi a:* . A)
   C |- B:*
   --------------------
   C |- M B : A[a:=B]    <-- note: substitution happening inside a type!

Abs2 (akd 2nd order abstraction):
   C, a:* |- M: A
   ---------------------------------
   C |- lambda a:* . M : (Pi a:*. A)
~~~

@section kinds Kinds

Here we start over from Simply-Typed Lambda Calculus
and add "types depedening on types".
Note that there are no Pi-types here, we are back to only arrows.

Imagine something like `lambda a:* . a -> a`.
This is similar to `Pi a:* . a -> a` but,
whilst `Pi` denotes a type, `lambda` denotes an expression.
So this is an expression that takes a type and returns a type.
It is called a *type constructor*.
So what is its type now?
Similary to arrows in Simply-Typed Lambda Calculus,
its type is `* -> *`, since it takes a type and returns a type.

In C++ this is very similar to `std::vector`.
In fact, `vector` has type `* -> * -> *`,
because it takes 2 template parameters:
one for the element and one for the allocator.
You can also "pass" it to a function,
say `template <template <typename, typename> typename> int f();`,
by calling `f<std::vector>()`.

So now, `int` is a type (i.e. `int : *`) and
`vector` is a term of type `* -> * -> *` (i.e. `vector : * -> * -> *`).
At this level of the Lambda Cube `*` and `* -> * -> *` have their own "type", called *kind*.

Note that there is no value "of type vector",
i.e. there is no expression `M` such that `M: vector`.
There are values of type `vector<int, allocator>`,
but not of type `vector` alone.
Neither in C++ nor in Type Theory.

In the same way that we use `*` to mean any type,
we can also use `[]` (called *box*) to mean any kind,
eg `* : []`, `* -> * : []`, `* -> * -> *: []`, etc.
So, in some sense, "box is the type of all kinds".
Here we use the character sequence `[]` but the correct symbol is typically a
[Tombstone](https://en.wikipedia.org/wiki/Tombstone_(typography)), hence the name *box*.

If we use `s` to denote either a type or a kind,
and informally refer to them as "sorts",
we can define the following typing rules.

~~~plain
Sort:
   <empty context> |- * : []

Var:
   C |- A: s
   ------------- if x not already defined in C
   C, x:A |- x:A

Weak:
   C |- A:B
   C |- T:s
   ------------- if x not already defined in C
   C, x:T |- A:B

Form:
   C |- A:s
   C |- B:s
   ---------------
   C |- A -> B : s

App:
   C |- M : A -> B
   C |- N : A
   ---------------
   C |- M N : B

Abs:
   C, x: A |- M : B
   C       |- A -> B : s
   ----------------------------
   C |- lambda x:A . M : A -> B

Conv:
   C |- A: B
   C |- B2:s
   ---------- if B and B2 are beta-equivalent
   C |- A: B2
~~~

Again, `s` plays a double role here; if you wanted to be explicit,
you would have to double up the number of rules.

Note that in the above rules,
the constraint "if x not already defined in C"
can be dropped if one takes care of shadowing correctly.
This is what is done in all programming languages, including DepC.

The above rules are only slightly more complicated than before,
and a couple of them are only there to fix some technicalities:

- Sort is the base case of the recursion: `*` is always a kind;
- Var is somewhat the same as before, except that now,
  in order to add a variable to a context,
  you also have to make sure that its type is valid;
  for example, `vector<vector, allocator>` is not a valid type;
- Weak is there only to fix a technicality:
  as it stands, the Var rule can only be used if
  the variable `x` was the last one declared;
  but, clearly, adding more variables to the context
  does not affect previously declared variables;
- Form allows to construct arrows, either in types or in kinds,
  eg `int -> int` or `* -> *`;
  note that neither `int -> *` nor `* -> int` are possible in this setting;
- App should be fairly intuitive:
  you can apply `int -> string` to an `int` to obtain a `string`,
  or a `* -> *` to a `*` to obtain a `*`;
- Abs should equally be fairly intuitive:
  it introduces new functions, eg of type either `int -> int` or `* -> *`;
- Conv (the Conversion rule) is a bit of a technicality,
  but it will become more important later;
  essentially, it says that you might have to perform beta-reduction
  in types, because a term of type `int` and a term of type
  `(lambda t:* . t)int` should be understood as the same type.

@section dependent_types Dependent Types

We start again from Simply-Typed Lambda Calculus,
and add "types depending on terms.
Here we reintroduce Pi-types.

In C++ you can do `std::array<int, 3>`.
In some sense, this is already a type that depends on a term, `3` in this case.
But you cannot generalize this to, say, `auto f(int n) -> std::array<int, n>`.

With types depending on terms you can write such an `f`.
So what is its type?
We have to reintroduce Pi-types.
Its type is, in fact, `Pi n:int . array int n`.
Note that now the body of the Pi-type contains
a whole expression, not just an arrow.

The typing rules are very similar to the ones seen for kinds.
The only differences are in the Form, App and Abs rules,
where all arrows have been replaced by Pi-types.
In fact, a Pi-type `Pi x:A . B` where `x` does not occur in `B`,
can be written as `A -> B`.

~~~plain
Sort:
   <empty context> |- * : []

Var:
   C |- A: s
   -------------
   C, x:A |- x:A

Weak:
   C |- A:B
   C |- T:s
   -------------
   C, x:T |- A:B

Form:
   C      |- A:*
   C, x:A |- B:s
   -------------------
   C |- Pi x:A . B : s

App:
   C |- M : (Pi x:A . B)
   C |- N : A
   ---------------------
   C |- M N : B[x:=N]

Abs:
   C, x: A |- M : B
   C       |- (Pi x:A . B) : s
   ----------------------------------
   C |- lambda x:A . M : (Pi x:A . B)

Conv:
   C |- A: B
   C |- B2:s
   ---------- if B and B2 are beta-equivalent
   C |- A: B2
~~~

@section lambda_cube Calculus of Construction

The Calculus of Construction is the result of combining
all these extension of Simply-Typed Lambda Calculus.
Here you can have all comibations:
types and terms depending on types and terms.

Astonishingly, all it takes is a slight modification
in just the Form rule, whereby the sort of the two premises
can be chosen independently from one another, say `s1` and `s2`.

~~~plain
Sort:
   <empty context> |- * : []

Var:
   C |- A: s
   -------------
   C, x:A |- x:A

Weak:
   C |- A:B
   C |- T:s
   -------------
   C, x:T |- A:B

Form:
   C      |- A:s1
   C, x:A |- B:s2
   --------------------
   C |- Pi x:A . B : s2

App:
   C |- M : (Pi x:A . B)
   C |- N : A
   ---------------------
   C |- M N : B[x:=N]

Abs:
   C, x: A |- M : B
   C       |- (Pi x:A . B) : s
   ----------------------------------
   C |- lambda x:A . M : (Pi x:A . B)

Conv:
   C |- A: B
   C |- B2:s
   ---------- if B and B2 are beta-equivalent
   C |- A: B2
~~~

Type-assignment and Type-checking remain both decidable,
so it is possible to construct a computer program to perform type-checking.
Term-finding is, however, undecidable, so it is impossible to construct a
program that will certainly find a term for any given type, only best-effort.
Under the Curry-Howard isomorphism, this means that theorem-proving will
always require human work. Computers can, at best, assist in the task.

Another fundamental difference between Simply-Typed Lambda Calculus,
i.e. the C programming language, and Calculus of Construction, i.e. DepC,
is that there is no distinction between types and expressions.
This is reflected in the AST where only the node for
expressions exists and there is no node for types.

@subsection delta_reduction Definitions, Environments and Delta-Reduction

In any programming language you can define a top-level function and give it a name, say `f`.
Usually you call `f` from another function, but
with dependent types you can also call `f` from a type expression,
for example `lambda x:f(int) . g(x)`.

Top-level functions, like `f`, are stored in a so-called *Environment*,
which you can think of as "the global scope".
With shadowing, an identifier `f` may refer to either a variable
in the "local" @ref context "Context" or a definition in the "global" *Environment*.

If the body of the top-level function `f` from the "global" *Environment* is visible,
you can expand an expression `f(x)` by substituting `f` for its body.
This operation is called Delta-Reduction or, equivalently, Delta-Unfolding.

@subsection beta_delta_reduction Beta-Delta-Reduction

@ref delta_reduction "Delta-" and @ref beta_reduction "Beta-Reduction"
can be combined into a single Beta-Delta-Reduction.
Here the reduction proceeds by sequencing beta and delta reduction
steps in any order, either at will or as necessary.

All the @ref typing_rules "typing rules" need to be slightly tweaked; in particular:

  - all rules should now include an environment *E* along the context *C*,
    i.e `E, C |- ...`
  - the Var rule now needs to account for the fact that `f`
    might be found in the environment E rather than context C
  - the constraint in the conversion rule "if B and B2 are beta-equivalent"
    should now read "if B and B2 are beta-delta-equivalent".

A variant of the *Strong Normalization Theorem* can be proved for beta-delta-normalization with dependent types.
*/
