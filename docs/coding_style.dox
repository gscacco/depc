/*
 * Copyright Raffaele Rossi 2023 - 2024.
 *
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at https://www.boost.org/LICENSE_1_0.txt)
 */
// NB using triple-slash style here because doxygen gets confused when it encounters `/*implicit*/` below
///
/// @page coding_style Coding Style
/// 
/// Coding Style in the repo is not super strict.
/// The bottom line is readability.
/// Sometimes a dense one-liner is more readable than a multi-line body;
/// sometimes a multi-line body is more readable than a dense one-liner.
/// Be kind to the next person after you and self-review your own code.
/// 
/// That being said, you can follow guidelines below.
/// 
/// @section coding_style_cxx C++ Code
/// 
/// These are the guidelines for C++ code.
/// Below some made-up code showing an example.
/// 
/// - Rule Number 1: adapt and be consistent to the current file,
///   even if that file is breaking all rules;
///   consistency within a file is more important.
/// - Indentation: 4 spaces; maximum line length: 120;
///   if you go 1 or 2 characters over the line,
///   and splitting it up looks even worse,
///   then it's ok to breach, occasionally.
/// - Header order:
///   put `#include` in order of specificity,
///   from more specific to more general,
///   then alphabetical within the same specificity:
///   - first the `hpp` matching the current `cpp`;
///   - then private headers from the current library, alphabetically;
///   - then public headers from the current library, alphabetically;
///   - then public headers of the next library up, alphabetically;
///   - then the next library before that, etc;
///   - then public headers of 3d party libraries,
///     eg antlr, in angle brackets;
///   - then boost, again in angle brackets;
///   - then standard C++ libraries;
///   - then standard C libraries,
///     but only if a C++ version doesn't exist,
///     i.e. prefer `<cmath>` over `<math.h>`.
/// - East-Const: always `type_t const&`; never `const type_t&`;
/// - Braces and single-statemnt bodies:
///   put curly braces on a separate,
///   but leave single-statement bodies without them.
///   Except if you need to separate that statement from, say,
///   a complex multi-line `if` condition;
///   but, even better, try think harder and break down that
///   complex condition using helper functions.
/// - Brace-initializer vs normal parenthesis:
///   when constructing an object using its constructor,
///   prefer `object(a,b,c)` over `object{a,b,c}`,
///   because this makes it clear that a constructor exists.
/// - Explicit constructors:
///   always mark single-argument constructors `explicit`,
///   unless you actually intended to have implicit conversion,
///   in which case write `/*implicit*/ object(arg)`
/// - Always (Auto) Const:
///   always use `auto const` (or `my_type_t const`),
///   including for function arguments,
///   unless you actually intend to mutate things.
///   This also applies to the index of `for` loops,
///   in which case use `std::views::iota`,
///   i.e. `for (auto const i: std::views::iota(...))`,
///   because this makes your intentions more explicit,
///   and it's also obvious that you are not skipping iterations,
///   or otherwise messing with the index.
/// - Use immediately-invoked-lambdas for complex initialization:
///   if the initialization of an object requires multiple statements,
///   but once initialization is finished you do not intend to modify
///   the object any further, consider using an immediately-invoked-lambda
///   so that the scope of mutability is clearly defined.
/// - Functional vs imperative:
///   do use functional style but don't go over-the-top;
///   at the end of the day, this is C++ not Haskell;
///   sometimes imperative reads better than functional,
///   even though it would read very well in Haskell;
///   that's because in C++ the functional style came late.
/// - Use STL algorithms:
///   if you can't find a way, try harder;
///   if you still can't, then it's fine,
///   as long as you don't just give up right away.
///   And if you found a very complicated way, don't use it.
/// - Comments: they are very welcome, except when silly;
///   `int x = 0; // initialize x to 0` is definitey not welcome;
///   comments should be used to explain surprising behaviour,
///   or to give more colour on why, what, who, etc.
/// 
/// @include coding_style.cpp
