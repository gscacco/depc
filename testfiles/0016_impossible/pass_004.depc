/*
 * Copyright Raffaele Rossi 2023 - 2024.
 *
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at https://www.boost.org/LICENSE_1_0.txt)
 */
axiom nothing_smaller_than_false(bool_t a, true_t(a < false)) -> true_t(false);

func a_lt_b_implies_b(bool_t a, bool_t b, 0 true_t(a < b)) -> i32_t
{
    if (b)
        return 0;
    else if (a < false)
        impossible because nothing_smaller_than_false(a, auto);
    else
        impossible;
}

func f(bool_t a, bool_t b, 0 true_t(a < b)) -> i32_t
{
    return a_lt_b_implies_b(a, b, auto);
}

// same but with implicit else-branches
func a_lt_b_implies_b2(bool_t a, bool_t b, 0 true_t(a < b)) -> i32_t
{
    if (b)
        return 0;
    if (a < false)
        impossible because nothing_smaller_than_false(a, auto);
    impossible;
}

func f2(bool_t a, bool_t b, 0 true_t(a < b)) -> i32_t
{
    return a_lt_b_implies_b2(a, b, auto);
}
