/*
 * Copyright Raffaele Rossi 2023 - 2024.
 *
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at https://www.boost.org/LICENSE_1_0.txt)
 */
/**
 * @file
 * @brief Set of functions to generate LLVM values, for example constants and function calls.
 */
#pragma once

#include "private/context.hpp"

#include "dep0/typecheck/ast.hpp"

#include <llvm/IR/IRBuilder.h>
#include <llvm/IR/Value.h>

namespace dep0::llvmgen {

/** @brief Generates the value of the unit type. */
llvm::Value* gen_val_unit(global_ctx_t&);

/** @brief Generates an LLVM value for the given type and number. */
llvm::Value* gen_val(llvm::IntegerType*, boost::multiprecision::cpp_int const&);

/**
 * @brief Generates an LLVM value for the given expression.
 * @param dest If not `nullptr`, emit IR instructions as explained in `maybe_gen_store()`.
 * @return The value generated or `dest` if it was not `nullptr`.
 */
llvm::Value* gen_val(
    global_ctx_t&,
    local_ctx_t const&,
    llvm::IRBuilder<>&,
    typecheck::expr_t const&,
    llvm::Value* dest);

/**
 * @brief Generates LLVM instructions to `store/memcpy/memset` an LLVM value at some runtime location.
 *
 * The exact sequence of LLVM instructions generated by this function depends on the type of the value to store.
 * For example, for an `i32_t` a simple `store` is enough but for an `array_t(i32_t, n)` a `memcpy` might be necessary.
 *
 * @param value The input LLVM value to store or copy.
 * @param dest
 *      An LLVM value that represents the runtime location where the value must be stored or copied.
 *      This LLVM value must therefore be of an appropriate pointer type compatible with `value`.
 *
 * @return If `dest` is `nullptr` returns `value`, otherwise returns `dest`.
 */
llvm::Value* maybe_gen_store(
    global_ctx_t&,
    local_ctx_t const&,
    llvm::IRBuilder<>&,
    llvm::Value* const value,
    llvm::Value* const dest,
    typecheck::expr_t const& type);

/**
 * @brief Generates an LLVM value from a runtime function call corresponding to the given application expression.
 * @param dest If not `nullptr`, emit IR instructions as explained in `maybe_gen_store()`.
 * @return The generated LLVM value or `dest` if it was not `nullptr`.
 */
llvm::Value* gen_func_call(
    global_ctx_t&,
    local_ctx_t const&,
    llvm::IRBuilder<>&,
    typecheck::expr_t::app_t const&,
    llvm::Value* dest);

} // namespace dep0::llvmgen
